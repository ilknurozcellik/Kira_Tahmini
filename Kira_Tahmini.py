# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xKPcCj41Sqeg8GDCzYO88k9ZmbD92Vom
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error
from google.colab import files

"""Gerekli kütüphaneleri içe aktardım."""

uploaded = files.upload()
df = pd.read_csv("antalya_kiralik_ev new.csv")

"""Veri setimi yükledim. Kullandığım veri seti antalya kiralık evler veri seti. Veri setini kaggle dan aldım. https://www.kaggle.com/datasets/drmurataltun/antalya-muratpaa-daire-kira-cretleri-2024-ocak"""

print(df.head())
print(df.info())
print(df.describe())

"""Veri setimin ilk beş satırını gözlemledim. Veri setimin kaç satı rve sütun içerdiğini, sütunların veri tipini ve null değer olup olmadığını gözlemledim. Sayısal sütunlarım için istatistiksel bilgileri ( standart sapma, ortalama, count, max-min vb) gözlemledim."""

numeric_cols = ["net_alan_m2", "brut_alan_m2", "aidat", "depozito", "banyo_sayisi", "bina_kat_sayisi", "bina_yas"]
for col in numeric_cols:
    df[col] = pd.to_numeric(df[col], errors="coerce")

df.dropna(inplace=True)

df["net_alan_m2"] = pd.to_numeric(df["net_alan_m2"], errors='coerce')
df["brut_alan_m2"] = pd.to_numeric(df["brut_alan_m2"], errors='coerce')
df.dropna(subset=["net_alan_m2", "brut_alan_m2"], inplace=True)

df = pd.get_dummies(df, drop_first=True)

"""Kategorik verileri sayısallaştırdım."""

corr_matrix = df.select_dtypes(include=['number']).corr()
important_columns = corr_matrix['fiyat'].abs().sort_values(ascending=False).head(10).index
sns.heatmap(df[important_columns].corr(), annot=True, fmt=".2f", cmap='coolwarm')
plt.title("Kira ile En Çok İlişkili Özellikler (Korelasyon)")
plt.show()

"""Yalnızca sayısal verileri kullanarak korelasyon matrisi oluşturdum. Bu matris veri setindeki değişkenler arasındaki ilişkileri gözlemlememize olanak sağlar."""

X = df.drop('fiyat', axis=1)
y = df['fiyat']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lr = LinearRegression()
lr.fit(X_train, y_train)
lr_preds = lr.predict(X_test)

xgb = XGBRegressor()
xgb.fit(X_train, y_train)
xgb_preds = xgb.predict(X_test)

lr_rmse = np.sqrt(mean_squared_error(y_test, lr_preds))
lr_mape = mean_absolute_percentage_error(y_test, lr_preds)

xgb_rmse = np.sqrt(mean_squared_error(y_test, xgb_preds))
xgb_mape = mean_absolute_percentage_error(y_test, xgb_preds)
print(" Linear Regression")
print("RMSE:", lr_rmse)
print("MAPE:", lr_mape)

print(" XGBoost Regressor")
print("RMSE:", xgb_rmse)
print("MAPE:", xgb_mape)

"""Veri setimi test ve eğitim setlerine ayırdım. Ayırdığım veri seti üzerinde lineer regresyon ve xgboost regresyon modellerini eğittim. RMSE ve MAPE ile modelimin performanını değerlendirdim.  """